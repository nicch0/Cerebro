{
    "root": true,
    "env": { "node": true },
    "plugins": [
      "@typescript-eslint",
      "import", "simple-import-sort"
    ],
    "extends": [
		// Uses the recommended rules from the @typescript-eslint/eslint-plugin
		"plugin:@typescript-eslint/recommended",
		"prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        ecmaVersion: 2023,
        project: true,
    },
    "rules": {
        // ESLint rules
        eqeqeq: "error",
        "@typescript-eslint/no-shadow": "error",
        "no-param-reassign": "error",
        "no-else-return": "warn",
        "dot-notation": "error",
        "no-unused-private-class-members": "error",
        curly: "error",
        "no-eval": "error",
        "no-template-curly-in-string": "error",
        "no-duplicate-imports": "error",
        "no-constructor-return": "error",
        "prefer-const": "error",
        "no-implicit-coercion": "error",
        "simple-import-sort/imports": [
            "warn",
            // no blank lines between groups
            { groups: [["^\\u0000", "^node:", "^@?\\w", "^", "^\\."]] },
        ],
        "simple-import-sort/exports": "warn",
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",
        // TSLint rule
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/explicit-member-accessibility": [
            "error",
            {
                overrides: {
                    constructors: "no-public",
                },
            },
        ],
        "@typescript-eslint/naming-convention": [
            "error",
            {
                selector: "default",
                format: ["camelCase", "snake_case"],
            },
            {
                selector: "import",
                format: ["camelCase", "PascalCase"],
            },
            {
                selector: "variable",
                format: ["camelCase", "UPPER_CASE", "snake_case"],
            },
            {
                selector: "typeLike",
                format: ["PascalCase"],
            },
            {
            	selector: "enumMember",
             	format: ["UPPER_CASE"],
            },
            {
                selector: "objectLiteralProperty",
                format: null,
            },
            {
                selector: "variable",
                modifiers: ["destructured"],
                format: null,
            },
            {
		        "selector": "parameter",
		        "format": ["camelCase", "snake_case"],
		        "leadingUnderscore": "allow"
		      }
        ],
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/switch-exhaustiveness-check": "error",
	    "@typescript-eslint/no-unused-vars": ["error", {
	      "argsIgnorePattern": "^_",
	      "varsIgnorePattern": "^_",
	      "caughtErrorsIgnorePattern": "^_"
	    }]
    },
    settings: {
        "import/resolver": {
            // some modules only have ambient type declarations
            typescript: { alwaysTryTypes: true },
        },
    },
    overrides: [
        {
            files: ["*.test.ts", "*.test.tsx", "**/tests/*.ts"],
            extends: ["plugin:jest/recommended", "plugin:jest/style"],
            rules: {
                // The rule is too native, even default CDK does not have explicit `expect`
                "jest/expect-expect": "off",
                // Must have for async functions to avoid missing checks
                "jest/prefer-expect-assertions": [
                    "warn",
                    {
                        onlyFunctionsWithAsyncKeyword: true,
                        onlyFunctionsWithExpectInCallback: true,
                    },
                ],
                "jest/unbound-method": "warn",
                "@typescript-eslint/no-unsafe-member-access": "warn",
                "@typescript-eslint/no-unsafe-call": "warn",
            },
        },
	    {
	      "files": ["**/commands/*.ts"],
	      "rules": {
	        "@typescript-eslint/no-explicit-any": "off",
	        "@typescript-eslint/explicit-function-return-type": "off",
	      }
	    },
    ],
  }
